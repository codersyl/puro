# 文件名： CMakeLists.txt

# 参考来源：
# https://blog.csdn.net/whahu1989/article/details/82078563
# https://zhuanlan.zhihu.com/p/393316878
# https://www.jianshu.com/nb/47538433

# cmake 最小版本要求
cmake_minimum_required(VERSION 3.12.4)
# 将当前工程的名称赋值给PROJECT_NAME
# 对于下面这句，就是${PROJECT_NAME} = test
project(test)

# 把后面三个设为 ALL 的值
# set 还有两种其他用法，暂时不会涉及
set(ALL 
    a.cc
    b.cc
    c.cc
)

# 将指定路径目录加入头文件搜索范围
# 下面这句：把当前路径下名为 all 的文件夹下的所有文件加入搜索路径
include_directories(${PROJECT_SOURCE_DIR}/all)

# 使用指定的源文件来生成目标可执行文件。
# 下面这句：用 filename.cc fileB.cc 生成可执行文件 NAME
add_executable(NAME filename.cc fileB.cc)

# 添加一个子目录并构建该子目录。
# 此目录中也要有 CMakeLists.txt
# add_subdirectory (source_dir [binary_dir] [EXCLUDE_FROM_ALL])
add_subdirectory(someFolder)


# -------------------------------------------------------------
# 生成动态库、静态库
# .so 是动态库
# .a 是静态库
cmake_minimum_required (VERSION 3.0)
project (demo)
set (SRC_LIST ${PROJECT_SOURCE_DIR}/testFunc/testFunc.c)
# 指定库名、类型、用于生成库的源文件
add_library (testFunc_shared SHARED ${SRC_LIST})
add_library (testFunc_static STATIC ${SRC_LIST})
# 设置生成库的属性，例如输出的库文件名字，版本等
set_target_properties (testFunc_shared PROPERTIES OUTPUT_NAME "testFunc")
set_target_properties (testFunc_static PROPERTIES OUTPUT_NAME "testFunc")
# 设置输出路径
set (LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)

# -------------------------------------------------------------
# 库的链接
# find_library: 在指定目录下查找指定库，并把库的绝对路径存放到变量里
# 第一个参数是变量名称
# 第二个参数是库名称
# 第三个参数是HINTS
# 第四个参数是路径
find_library(TESTFUNC_LIB testFunc HINTS ${PROJECT_SOURCE_DIR}/testFunc/lib)
# 把库链接到目标 main 中
target_link_libraries (main ${TESTFUNC_LIB})

# -------------------------------------------------------------
# 编译选项
# 添加编译选项
add_compile_options(-std=c++11 -Wall -g -D_PTHREADS) 